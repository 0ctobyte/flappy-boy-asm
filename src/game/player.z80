SECTION "player", CODE

INCLUDE "gb/constants.inc"

PLAYER_START_X EQU (160 / 2 - 20)
PLAYER_START_Y EQU (144 / 2 + 16)
PLAYER_FLOOR_LIMIT EQU (136)
PLAYER_ACCEL_Y EQU 1
PLAYER_JUMP EQU $00
PLAYER_MAX_VEL EQU $04
PLAYER_DELAY EQU $02
PLAYER_WAVE_COUNT EQU $08 * 4

player_sprite_init::
    ; Set variables
    ld HL, player_frame_index
    ld [HL], $00
    ld HL, player_accel_delay
    ld [HL], PLAYER_DELAY
    ld HL, player_active
    ld [HL], $00
    ld HL, player_x
    ld [HL], PLAYER_START_X
    ld HL, player_y
    ld [HL], PLAYER_START_Y
    ld HL, player_vel_y
    ld [HL], $00
    ld HL, player_bounce
    ld [HL], $FE
    ; Enable sprite
    ld HL, LCD_CTRL
    set 1, [HL]
    ; Set Palette
    ld HL, OBJ0_PAL
    ld [HL], %11100100
    ; Set Attributes
    ; Top left
    ld HL, $FE00
    ld [HL], PLAYER_START_Y
    inc L
    ld [HL], PLAYER_START_X
    inc L
    ld [HL], $80
    ; Top right
    ld HL, $FE04
    ld [HL], PLAYER_START_Y
    inc L
    ld [HL], PLAYER_START_X + 8
    inc L
    ld [HL], $81
    ; Bottom right
    ld HL, $FE08
    ld [HL], PLAYER_START_Y + 8
    inc L
    ld [HL], PLAYER_START_X + 8
    inc L
    ld [HL], $82
    ; Bottom left
    ld HL, $FE0C
    ld [HL], PLAYER_START_Y + 8
    inc L
    ld [HL], PLAYER_START_X
    inc L
    ld [HL], $83
    ret

player_update::
    ; update animation
    ld HL, player_frame_index
    ld A, [HL]
    ld HL, player_frames
    ld L, A
    ld A, [HL] ; Got frame
    ld HL, $FE0E
    ld [HL], A
    ld HL, player_frame_index
    inc [HL]
    ld A, [HL]
    cp 27
    jr nz, .player_update_continue_00
    ld [HL], $00

.player_update_continue_00:

    ; Check if Button A 
    ; was pressed
    ld HL, IO_P15
    bit BUTTON_A, [HL]
    jr nz, .player_update_no_input
    ld HL, IO_P15_OLD
    bit BUTTON_A, [HL]
    jr z, .player_update_no_input
    
    ; Set the player to active
    ld HL, player_active
    ld [HL], $01

    ; if button A was pressed
    ; we apply jump
.player_update_jump:
    ld HL, player_vel_y
    ld A, [HL]
    ld A, -(PLAYER_MAX_VEL * 2)
    ld [HL], A

.player_update_no_input:
    ld HL, player_active
    ld A, [HL]
    cp $00
    jr nz, .player_update_apply_accel_y

.player_update_init_wave_move:
    ; Get table pointer
    ld BC, player_wave_table
    ld A, C
    ; Get wave index
    ld HL, player_wave_index
    ld C, [HL]
    ; increment index
    inc [HL]
    ; offset address
    adc A, C
    ld H, B
    ld L, C
    ; store wave value
    ld A, [HL]
    ld HL, player_y
    ld [HL], PLAYER_START_Y
    ; apply wave offset
    adc A, [HL]
    ; store velue
    ld [HL], A
    ; check if index is in range
    ld HL, player_wave_index
    ld A, [HL]
    cp PLAYER_WAVE_COUNT
    jp nz, player_update_end
    ld [HL], $00
    jr player_update_end

.player_update_apply_accel_y:
    ld HL, player_accel_delay
    dec [HL]
    ld A, [HL]
    cp $00
    jr nz, .player_update_apply_vel_y
    ld [HL], PLAYER_DELAY

    ld HL, player_vel_y    
    ; Apply acceleration y of 1
    inc [HL]
    ; Check if we exceed the max velocity
    ld A, [HL]
    ; if it's greater than PLAYER_MAX_VEL 
    ; we cap it
    cp PLAYER_MAX_VEL + 6
    jp nz, .player_update_apply_vel_y
    ld [HL], PLAYER_MAX_VEL + 5

.player_update_apply_vel_y:
    ld B, [HL]
    ld HL, player_y
    ld A, [HL]
    adc A, B
    ld [HL], A

.player_update_check_floor_collision:
    cp PLAYER_FLOOR_LIMIT
    jr c, .player_update_check_ceil_collision
    ld [HL], PLAYER_FLOOR_LIMIT
    ld HL, FADE_IN_ACTIVE
    ld A, [HL]
    cp $02
    jr z, .player_update_stop_game
    ld HL, player_vel_y
    ld [HL], $FA
    jr .player_update_stop_game

.player_update_check_ceil_collision:
    cp $08
    jr nc, .player_update_no_collision
    ld [HL], $08
    jr .player_update_stop_game

.player_update_stop_game:
    ; if we hit floor we finish the game
    ; stop parallax and fade out to menu
    ld HL, ALLOW_PARALLAX
    ld [HL], $01
    ld HL, FADE_IN_ACTIVE
    ld [HL], $02
    ld HL, READ_INPUT
    ld [HL], $01
    jr player_update_end

.player_update_no_collision:
    xor A

player_update_end:
    ret

player_set_position::
    xor A
    ld HL, player_y
    ld B, [HL]
    ld HL, player_x
    ld C, [HL]
    ; Top left
    ld HL, $FE00
    ld [HL], B
    inc L
    ld [HL], C
    ; Top right
    ld HL, $FE04
    ld E, C
    ld A, C
    adc A, 8
    ld C, A
    ld [HL], B
    inc L
    ld [HL], C
    ; Bottom left
    ld HL, $FE0C
    ld A, B
    adc A, 8
    ld B, A
    ld [HL], B
    inc L
    ld [HL], E
    ; Bottom right
    ld HL, $FE08
    ld [HL], B
    inc L
    ld [HL], C
    
    ret

SECTION "player_vars", BSS
player_x:: DS 1
player_y:: DS 1
player_vel_y:: DS 1
player_bounce:: DS 1
player_active:: DS 1
player_accel_delay:: DS 1
player_wave_index:: DS 1
player_frame_index:: DS 1

SECTION "player_data", DATA[$5C00]
player_wave_table:
    DB $00, $00, $00, $00 
    DB $FF, $FF, $FF, $FF 
    DB $FE, $FE, $FE, $FE 
    DB $FF, $FF, $FF, $FF 
    DB $00, $00, $00, $00 
    DB $01, $01, $01, $01 
    DB $02, $02, $02, $02
    DB $01, $01, $01, $01

SECTION "player_frames", DATA[$5D00]
player_frames:
    DB $84, $84, $84, $84, $84, $84, $84, $84, $84, $83, $83, $83, $83, $83, $83, $83, $83, $83, $85, $85, $85, $85, $85, $85, $85, $85, $85
